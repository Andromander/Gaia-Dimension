buildscript {
    gradle.projectsEvaluated {
        tasks.withType(JavaCompile) {
            options.compilerArgs << "-Xmaxerrs" << "1000"
        }
    }
}

plugins {
    id 'java-library'
    id 'eclipse'
    id 'idea'
    id 'maven-publish'
    id 'net.neoforged.gradle.userdev' version '7.0.152'
}

def secrets = new Properties()
def secretsFile = file('secrets.properties')
if (secretsFile.exists()) {
    secretsFile.withInputStream {
        stream -> secrets.load(stream)
    }
    fileTree("secrets").matching {
        include "**/*.properties"
    }.each {
        File file ->
            file.withInputStream {
                stream -> secrets.load(stream)
            }
    }
}

version = project.minecraft_version + "-" + project.mod_version
group = project.mod_group

if (hasProperty("CIVersion")) {
    version += "." + CIVersion
}

repositories {
    mavenLocal()
    maven {
        name 'tterrag maven' //CTM
        url 'https://maven.tterrag.com/'
    }
    maven {
        name 'ModMaven' // JEI + Mantle + TCon
        url 'https://modmaven.dev/'
    }
}

base {
    archivesName = project.archives_base_name
}

java.toolchain.languageVersion = JavaLanguageVersion.of(21) // Need this here so eclipse task generates correctly.

runs {
    minecraft.accessTransformers.file rootProject.file('src/main/resources/META-INF/accesstransformer.cfg')

    configureEach {
        modSource project.sourceSets.main
    }

    client {
        systemProperty 'forge.enabledGameTestNamespaces', project.mod_id
    }

    server {
        systemProperty 'forge.enabledGameTestNamespaces', project.mod_id
        // Recommended logging data for a userdev environment
        systemProperty 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

        // Recommended logging level for the console
        systemProperty 'forge.logging.console.level', 'debug'
        programArgument '--nogui'
    }

    data {
        workingDirectory project.file('run-data')
        programArguments.addAll '--mod', 'gaiadimension', '--all', '--output', file('src/generated/resources/').getAbsolutePath(), '--existing', file('src/main/resources/').getAbsolutePath()
    }
}

sourceSets.main.resources {
    srcDir 'src/generated/resources'
}

dependencies {
    implementation "net.neoforged:neoforge:${project.neoforge_version}"
    compileOnly "mezz.jei:jei-${minecraft_version}-neoforge-api:${jei_version}"
    runtimeOnly "mezz.jei:jei-${minecraft_version}-neoforge:${jei_version}"

//    runtimeOnly fg.deobf("com.sk88q.worldedit:WorldEdit:${we_version}")
//    runtimeOnly fg.deobf("team.chisel.ctm:CTM:${project.ctm_version}")
//    runtimeOnly fg.deobf("me.ichun.mods.tabula.common:Tabula:10.2.0")
//    runtimeOnly fg.deobf("me.ichun.mods.ichunutil.common:iChunUtil:10.2.0")
}

tasks.withType(ProcessResources).configureEach {
    var replaceProperties = [
            minecraft_version   : minecraft_version, minecraft_version_range: minecraft_version_range,
            neoforge_version    : neoforge_version, neoforge_version_range: neoforge_version_range,
            loader_version_range: loader_version_range,
            mod_id              : mod_id, mod_version: version
    ]
    inputs.properties replaceProperties

    filesMatching(['META-INF/neoforge.mods.toml', 'pack.mcmeta']) {
        expand replaceProperties + [project: project]
    }
}

jar {
    manifest {
        attributes(["Specification-Title": "Gaia Dimension",
                    "Specification-Vendor": "Androsa",
                    "Specification-Version": "${version}",
                    "Implementation-Title": project.name,
                    "Implementation-Version": "${version}",
                    "Implementation-Vendor" :"Androsa",
                    "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")],)
    }
}

def mavenUser = hasProperty("CIMUser") ? CIMUser : secrets.getProperty("maven_username")
def mavenToken = hasProperty("CIMToken") ? CIMToken : secrets.getProperty("maven_password")

publishing {
    publications {
        mavenJava(MavenPublication) {
            afterEvaluate {
                artifact project.jar
                artifact project.sourceJar
            }
            setGroupId 'androsa'
            setArtifactId project.mod_id
        }
    }
    repositories {
        maven {
            url "https://maven.tamaized.com/releases"
            credentials {
                username mavenUser
                password mavenToken
            }
        }
    }
}

tasks.register('sourceJar', Jar) {
    dependsOn 'classes'
    from sourceSets.main.allSource
    archiveClassifier = 'sources'
}